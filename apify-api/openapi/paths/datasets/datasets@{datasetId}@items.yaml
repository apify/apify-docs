get:
  tags:
    - Datasets/Item collection
  summary: Get items
  description: |
    Returns data stored in the dataset in a desired format.


    ### Response format


    The format of the response depends on <code>format</code> query parameter.


    The <code>format</code> parameter can have one of the following values:

    <code>json</code>, <code>jsonl</code>, <code>xml</code>, <code>html</code>,
    <code>csv</code>, <code>xlsx</code> and <code>rss</code>.


    The following table describes how each format is treated.


    <table>
      <tr>
        <th>Format</th>
        <th>Items</th>
      </tr>
      <tr>
        <td><code>json</code></td>
        <td rowspan="3">The response is a JSON, JSONL or XML array of raw item objects.</td>
      </tr>
      <tr>
        <td><code>jsonl</code></td>
      </tr>
      <tr>
        <td><code>xml</code></td>
      </tr>
      <tr>
        <td><code>html</code></td>
        <td rowspan="3">The response is a HTML, CSV or XLSX table, where columns correspond to the
        properties of the item and rows correspond to each dataset item.</td>
      </tr>
      <tr>
        <td><code>csv</code></td>
      </tr>
      <tr>
        <td><code>xlsx</code></td>
      </tr>
      <tr>
        <td><code>rss</code></td>
        <td colspan="2">The response is a RSS file. Each item is displayed as child elements of one
        <code>&lt;item&gt;</code>.</td>
      </tr>
    </table>

    Note that CSV, XLSX and HTML tables are limited to 500 columns and the column names cannot be longer than 200 characters.
    JSON, XML and RSS formats do not have such restrictions.


    ### Hidden fields


    The top-level fields starting with the `#` character are considered hidden.
    These are useful to store debugging information and can be omitted from the output by providing the `skipHidden=1` or `clean=1` query parameters.
    For example, if you store the following object to the dataset:


    ```

    {
        productName: "iPhone Xs",
        description: "Welcome to the big screens."
        #debug: {
            url: "https://www.apple.com/lae/iphone-xs/",
            crawledAt: "2019-01-21T16:06:03.683Z"
        }
    }

    ```


    The `#debug` field will be considered as hidden and can be omitted from the
    results. This is useful to

    provide nice cleaned data to end users, while keeping debugging info
    available if needed. The Dataset object

    returned by the API contains the number of such clean items in the`dataset.cleanItemCount` property.


    ### XML format extension


    When exporting results to XML or RSS formats, the names of object properties become XML tags and the corresponding values become tag's children. For example, the following JavaScript object:

    ```

    {
        name: "Paul Newman",
        address: [
            { type: "home", street: "21st", city: "Chicago" },
            { type: "office", street: null, city: null }
        ]
    }

    ```


    will be transformed to the following XML snippet:


    ```

    <name>Paul Newman</name>

    <address>
      <type>home</type>
      <street>21st</street>
      <city>Chicago</city>
    </address>
    <address>
      <type>office</type>
      <street/>
      <city/>
    </address>

    ```

    If the JavaScript object contains a property named `@` then its sub-properties are exported as attributes of the parent XML
    element.
    If the parent XML element does not have any child elements then its value is taken from a JavaScript object property named `#`.

    For example, the following JavaScript object:


    ```

    {
      "address": [{
        "@": {
          "type": "home"
        },
        "street": "21st",
        "city": "Chicago"
      },
      {
        "@": {
          "type": "office"
        },
        "#": 'unknown'
      }]
    }

    ```


    will be transformed to the following XML snippet:


    ```

    <address type="home">
      <street>21st</street>
      <city>Chicago</city>
    </address>

    <address type="office">unknown</address>

    ```


    This feature is also useful to customize your RSS feeds generated for various websites.


    By default the whole result is wrapped in a `<items>` element and each page object is wrapped in a `<item>` element.

    You can change this using <code>xmlRoot</code> and <code>xmlRow</code> url parameters.


    ### Pagination


    The generated response supports [pagination](#/introduction/pagination).
    The pagination is always performed with the granularity of a single item, regardless whether <code>unwind</code> parameter was provided.
    By default, the **Items** in the response are sorted by the time they were stored to the database, therefore you can use pagination to incrementally fetch the items as they are being added.

    The maximum number of items that will be returned in a single API call is limited to 250,000.

    <!-- GET_ITEMS_LIMIT -->

    If you specify `desc=1` query parameter, the results are returned in the reverse order than they were stored (i.e. from newest to oldest items).
    Note that only the order of **Items** is reversed, but not the order of the `unwind` array elements.
  operationId: dataset_items_get
  security:
    - apiKeyStoreId: []
    - httpBearerStoreId: []
  parameters:
    - name: datasetId
      in: path
      description: Dataset ID or `username~dataset-name`.
      required: true
      style: simple
      schema:
        type: string
        example: WkzbQMuFYuamGv3YF
    - name: format
      in: query
      description: |
        Format of the results, possible values are: `json`, `jsonl`, `csv`, `html`, `xlsx`, `xml` and `rss`. The default value is `json`.
      style: form
      explode: true
      schema:
        type: string
        example: json
    - name: clean
      in: query
      description: |
        If `true` or `1` then the API endpoint returns only non-empty items and skips hidden fields (i.e. fields starting with the # character).
        The `clean` parameter is just a shortcut for `skipHidden=true` and `skipEmpty=true` parameters.
        Note that since some objects might be skipped from the output, that the result might contain less items than the `limit` value.
      style: form
      explode: true
      schema:
        type: boolean
        example: false
    - name: offset
      in: query
      description: |
        Number of items that should be skipped at the start. The default value is `0`.
      style: form
      explode: true
      schema:
        type: number
        format: double
        example: 0
    - name: limit
      in: query
      description: Maximum number of items to return. By default there is no limit.
      style: form
      explode: true
      schema:
        type: number
        format: double
        example: 99
    - name: fields
      in: query
      description: |
        A comma-separated list of fields which should be picked from the items, only these fields will remain in the resulting record objects.
        Note that the fields in the outputted items are sorted the same way as they are specified in the `fields` query parameter.
        You can use this feature to effectively fix the output format.
      style: form
      explode: true
      schema:
        type: string
        example: 'myValue,myOtherValue'
    - name: omit
      in: query
      description: A comma-separated list of fields which should be omitted from the items.
      style: form
      explode: true
      schema:
        type: string
        example: 'myValue,myOtherValue'
    - name: unwind
      in: query
      description: |
        A comma-separated list of fields which should be unwound, in order which they should be processed. Each field should be either an array or an object.
        If the field is an array then every element of the array will become a separate record and merged with parent object.
        If the unwound field is an object then it is merged with the parent object.
        If the unwound field is missing or its value is neither an array nor an object and therefore cannot be merged with a parent object then the item gets preserved as it is.
        Note that the unwound items ignore the `desc` parameter.
      style: form
      explode: true
      schema:
        type: string
        example: 'myValue,myOtherValue'
    - name: flatten
      in: query
      description: |
        A comma-separated list of fields which should transform nested objects into flat structures.

        For example, with `flatten="foo"` the object `{"foo":{"bar": "hello"}}` is turned into `{"foo.bar": "hello"}`.

        The original object with properties is replaced with the flattened object.
      style: form
      explode: true
      schema:
        type: string
        example: myValue
    - name: desc
      in: query
      description: |
        By default, results are returned in the same order as they were stored.
        To reverse the order, set this parameter to `true` or `1`.
      style: form
      explode: true
      schema:
        type: boolean
        example: true
    - name: attachment
      in: query
      description: |
        If `true` or `1` then the response will define the `Content-Disposition:
        attachment` header, forcing a web browser to download the file rather
        than to display it. By default this header is not present.
      style: form
      explode: true
      schema:
        type: boolean
        example: true
    - name: delimiter
      in: query
      description: |
        A delimiter character for CSV files, only used if `format=csv`. You
        might need to URL-encode the character (e.g. use `%09` for tab or `%3B`
        for semicolon). The default delimiter is a simple comma (`,`).
      style: form
      explode: true
      schema:
        type: string
        example: ;
    - name: bom
      in: query
      description: |
        All text responses are encoded in UTF-8 encoding. By default, the
        `format=csv` files are prefixed with the UTF-8 Byte Order Mark (BOM), while `json`, `jsonl`, `xml`, `html` and `rss` files are not.

        If you want to override this default behavior, specify `bom=1` query parameter to include the BOM or `bom=0` to skip it.
      style: form
      explode: true
      schema:
        type: boolean
        example: false
    - name: xmlRoot
      in: query
      description: |
        Overrides default root element name of `xml` output. By default the root element is `items`.
      style: form
      explode: true
      schema:
        type: string
        example: items
    - name: xmlRow
      in: query
      description: |
        Overrides default element name that wraps each page or page function result object in `xml` output. By default the element name is `item`.
      style: form
      explode: true
      schema:
        type: string
        example: item
    - name: skipHeaderRow
      in: query
      description: If `true` or `1` then header row in the `csv` format is skipped.
      style: form
      explode: true
      schema:
        type: boolean
        example: true
    - name: skipHidden
      in: query
      description: |-
        If `true` or `1` then hidden fields are skipped from the output, i.e. fields starting with the `#` character.
      style: form
      explode: true
      schema:
        type: boolean
        example: false
    - name: skipEmpty
      in: query
      description: |
        If `true` or `1` then empty items are skipped from the output.

        Note that if used, the results might contain less items than the limit value.
      style: form
      explode: true
      schema:
        type: boolean
        example: false
    - name: simplified
      in: query
      description: |
        If `true` or `1` then, the endpoint applies the `fields=url,pageFunctionResult,errorInfo`
        and `unwind=pageFunctionResult` query parameters. This feature is used to emulate simplified results provided by the
        legacy Apify Crawler product and it's not recommended to use it in new integrations.
      style: form
      explode: true
      schema:
        type: boolean
        example: false
    - name: skipFailedPages
      in: query
      description: |
        If `true` or `1` then, the all the items with errorInfo property will be skipped from the output.

        This feature is here to emulate functionality of API version 1 used for the legacy Apify Crawler product and it's not recommended to use it in new integrations.
      style: form
      explode: true
      schema:
        type: boolean
        example: false
  responses:
    '200':
      description: ''
      headers:
        X-Apify-Pagination-Offset:
          content:
            text/plain:
              schema:
                type: string
              example: '0'
        X-Apify-Pagination-Limit:
          content:
            text/plain:
              schema:
                type: string
              example: '100'
        X-Apify-Pagination-Count:
          content:
            text/plain:
              schema:
                type: string
              example: '100'
        X-Apify-Pagination-Total:
          content:
            text/plain:
              schema:
                type: string
              example: '10204'
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
            example: [foo: bar, foo2: bar2]
        application/jsonl:
          schema:
            type: string
          example: '{"foo":"bar"}\n{"foo2":"bar2"}\n'
        text/csv:
          schema:
            type: string
          example: 'foo,bar\nfoo2,bar2\n'
        text/html:
          schema:
            type: string
          example: '<table><tr><th>foo</th><th>bar</th></tr><tr><td>foo</td><td>bar</td></tr><tr><td>foo2</td><td>bar2</td></tr></table>'
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
          schema:
            type: string
        application/rss+xml:
          schema:
            type: string
          example: '<rss><channel><item><foo>bar</foo></item><item><foo2>bar2</foo2></item></channel></rss>'
        application/xml:
          schema:
            type: string
          example: '<items><item><foo>bar</foo></item><item><foo2>bar2</foo2></item></items>'
  deprecated: false
  x-legacy-doc-urls:
    - https://docs.apify.com/api/v2#/reference/datasets/item-collection/get-items
    - https://docs.apify.com/api/v2#/reference/datasets/get-items
  x-js-parent: DatasetClient
  x-js-name: listItems
  x-js-doc-url: https://docs.apify.com/api/client/js/reference/class/DatasetClient#listItems
  x-py-parent: DatasetClientAsync
  x-py-name: stream_items
  x-py-doc-url: https://docs.apify.com/api/client/python/reference/class/DatasetClientAsync#stream_items
post:
  tags:
    - Datasets/Item collection
  summary: Put items
  description: |
    Appends an item or an array of items to the end of the dataset.

    The POST payload is a JSON object or a JSON array of objects to save into the dataset.


    **IMPORTANT:** The limit of request payload size for the dataset is 5 MB. If the array exceeds the size, you'll need to split it into a number of smaller arrays.
  operationId: dataset_items_post
  parameters:
    - name: datasetId
      in: path
      description: Dataset ID or `username~dataset-name`.
      required: true
      style: simple
      schema:
        type: string
        example: WkzbQMuFYuamGv3YF
  requestBody:
    description: ''
    content:
      application/json:
        schema:
          type: array
          items:
            $ref: ../../components/schemas/datasets/PutItemsRequest.yaml
          description: ''
          example:
            - foo: bar
            - foo: hotel
            - foo: restaurant
        example:
          - foo: bar
          - foo: hotel
          - foo: restaurant
    required: true
  responses:
    '201':
      description: ''
      headers:
        Location:
          content:
            text/plain:
              schema:
                type: string
              example: 'https://api.apify.com/v2/datasets/WkzbQMuFYuamGv3YF/items'
      content:
        application/json:
          schema:
            type: object
            example: {}
          example: {}
  deprecated: false
  x-legacy-doc-urls:
    - https://docs.apify.com/api/v2#/reference/datasets/item-collection/put-items
    - https://docs.apify.com/api/v2#/reference/datasets/put-items
  x-js-parent: DatasetClient
  x-js-name: pushItems
  x-js-doc-url: https://docs.apify.com/api/client/js/reference/class/DatasetClient#pushItems
  x-py-parent: DatasetClientAsync
  x-py-name: push_items
  x-py-doc-url: https://docs.apify.com/api/client/python/reference/class/DatasetClientAsync#push_items
