This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-09T23:46:40.283Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/
  styles/
    write-good/
      README.md
CONTRIBUTING.md
README.md

================================================================
Repository Files
================================================================

================
File: .github/styles/write-good/README.md
================
Based on [write-good](https://github.com/btford/write-good).

> Naive linter for English prose for developers who can't write good and wanna learn to do other stuff good too.

```
The MIT License (MIT)

Copyright (c) 2014 Brian Ford

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

================
File: CONTRIBUTING.md
================
# Contributing to Apify Documentation

## Before you start

1. Review this guide completely
2. Setup you development environment
3. Familiarize yourself with our style guide

## Development setup

### Prerequisites

1. Git
2. Node.js
3. Github access

### Installation steps

1. Clone the repository
2. Configure Github access:

    ```bash
    npm login --scope@apify-packages -registry=https://npm.pkg.github.com --auth-type=legacy
    ```

3. Run `npm install`
4. Start development server: `npm start`

## Style guide

### Language guidelines

- Use US English
- Write in inclusive language
- Avoid directional language (like "left" or "right")
- Use active voice whenever possible

### Formatting conventions

1. Text emphasis:

   - use *Bold* for UI elements
   - use **Italics** for emphasis
   - use `code` for inline code
   - use code blocks with language specification

2. Documentation elements:

    - Use admonitions
      - note
      - tip
      - info
      - caution
      - danger
    - Implement code tabs for multiple languages
    - Include proper metadata in front matter

3. Screenshots:

    - Use light theme when taking screenshots
    - Include meaningful alt texts
    - Use red indicators

### Metadata best practices

- Keep descriptions between 140-160 characters
- Avoid repetitive keywords
- Use action-oriented phrasing
- Exclude the word "documentation" in descriptions

## Repository structure

### Theme managements

- uses `@apify/docs-theme` package
- automatic synchronization via CI
- Theme updates trigger rebuilds across all projects

### Content organization

Content lives in the following locations:

- Main content like Platform documentation & Academy: `/sources` directory
- API reference: Genereated from OpenAPI specs within `/apify-api` directory
- SDK docs: separate repositores
- Client docs: separate repositories
- CLI docs: separate repositories

## API Documentation

### Overview

The API reference documentation at docs.apify.com is built directly froum our OpenAPI specification. The source of truth for the API specification lives in the `/apify-api`  directowy within [apify-docs](https://github.com/apify/apify-docs) repository.

### Setup requirements

1. Install Node.js
2. Clone the repository
3. Run `npm install`

### Basic commands

- `npm start` - Starts docs preview server including API reference
- `npm test` - Validates the definition

### Adding new documentation

#### Schema documentation

1. Navigate to `apify-api/openapi/components/schemas`
2. Create a new file named after your schema
3. Define the schema structure
4. Reference schea using `$ref` in other files

Example schema

```yaml
type: object
properties:
    id:
      description: The resource ID
      readOnly: true
      allOf:
        -$ref: ./ResourceId.yaml
```

#### Path documentation

1. Navigate to `apify-api/openapi/paths`
2. Create YAML file following the URL structure
3. Place path parameters in curly braces (e.g., {queueId})
4. Add path reference to openapi.yaml

Example path structure:

```yaml
'/requests-queues':
  $ref: './paths/request-queues/request-queues.yaml'
'/requests-queues/{queueId}':
  $ref: './paths/request-queues/request-queues@{queueId}.yaml'
```

#### Operation ID conventions

Operation IDs must follow this format:

- Generated from path structure and HTTP method
- Use camelCase for object names
- Single object for paths with {id}, plural otherwise
- Underscore separator between object name and action
- Method name in lowercase at the end

Examples:

- `/requests-queues` GET -> `requestQueues_get`
- `/requests-queues/{queueId}` PUT -> `requestQueue_put`
- `/acts/{actorId}/runs` POST -> `act_runs_post`

#### Submitting changes

1. Make your changes following the guidelines above
2. Test locally using provided npm commands
3. Submit a pull request to the `main` branch
4. Ensure all CI checks pass

## Development workflow

### Local development

1. Basic setup

    ```bash

    npm install
    npm start

    ```

2. Full setup with Nginx:

    - Clone all documentation repositories
    - Configure Nginx server
    - Update hosts file
    - Use `npm start:dev`

## Quality check

### Linting

1. Markdown:

    ```bash
    npm run lint:md
    npm run lint:md:fix
    ```

2. Code:

    ```bash
    npm run lint:code
    npm run lint:code:fix
    ```

3. Prose:

    - Use Vale for content linting
    - Configure exceptions in `accepts.txt`

## Pull request process

1. Follow [Conventional Commits](https://www.conventionalcommits.org/)
2. Pass all CI checks
3. Include comprehensive documentation updates

## Deployment

- Automatic deployment on merge to `master`
- Builds deploy to appropriate subdomains
- Updates trigger theme synchronization

## Additional resources

- [Docusaurus documentation](https://docusaurus.io/docs)
- [OpenAPI specification]
- [Vale style guide](https://vale.sh/docs)

================
File: README.md
================
# Apify Documentation

[![Check & Release](https://github.com/apify/apify-docs/actions/workflows/test.yaml/badge.svg)](https://github.com/apify/apify-docs/actions/workflows/test.yaml)

## Overview

This repository is the home of Apify's documentation, available at [docs.apify.com](https://docs.apify.com/). The documentation uses [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet).

### Documentation structure

- **Platform documentation**: Located in the [/sources](https://github.com/apify/apify-docs/tree/master/sources) directory
- **API documentation**:
  - **OpenAPI documentation**: [OpenAPI reference](https://docs.apify.com/api/v2)
  - [JavaScript/Node.js](https://docs.apify.com/api/client/js/)
  - [Python](https://docs.apify.com/api/client/python/)
- **SDK documentation**:
  - [JavaScript/Node.js](https://docs.apify.com/sdk/js/)
  - [Python](https://docs.apify.com/sdk/python/)
- **CLI documentation** - [CLI docs](https://docs.apify.com/cli/)

## Getting started

Before contributing, read these essential resources:

- [Contributing Guidelines](CONTRIBUTING.md)
- [Style Guide](CONTRIBUTING.md#style-guide)

## Documentation architecture

Our documentation consists of these main sections:

1. **Academy**: Platform-independent courses on scraping techniques
2. **Platform**: Main documentation for using Apify as a product
3. **API**: API reference and client libraries documentation
4. **SDK**: SDK libraries documentation
5. **CLI**: Documentation for building code and platform interaction

### Source Repositories

- apify-docs (this repository)
- apify-client-js
- apify-client-python
- apify-sdk-js
- apify-sdk-python
- apify-cli

### Homepage structure

The homepage menu cards (in `docs/homepage_content.json`) serve three user categories:

1. **Beginners**: Get started, Use Actors and scrapers
2. **Experienced Users**: Reduce blocking, Use platform features
3. **Advanced Users**: Build Actors, Advanced tutorials and debugging

## Need help

- For contribution questions, see our [Contributing Guidelines](CONTRIBUTING.md)
- For technical issues, create a GitHub issue
- For documentation feedback, use the feedback form on our documentation pages
